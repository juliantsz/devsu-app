# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
- feature-*
- release-*

resources:
- repo: self

variables:
  devEcrName: 'devsu-dev'
  stgEcrName: 'devsu-stg'
  prodEcrName: 'devsu-prod'

stages:
- stage: Test
  displayName: Test
  jobs:
  - job: Test
    displayName: Test
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature'))
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Maven@4
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean test'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false

- stage: Build
  displayName: Build And Push
  jobs:
  - job: Build
    displayName: Maven Package
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature'))
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PowerShell@2
      displayName: 'Extract version from pom.xml'
      inputs:
        targetType: 'inline'
        script: |
          $pomVersion = [xml] (Get-Content pom.xml)
          $version = $pomVersion.project.version
          Write-Host "##vso[task.setvariable variable=tag]$version"
    - task: Maven@4
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'package'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      displayName: Build image
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        repository: $(devEcrName)
        tags: |
          $(tag)
    - task: ECRPushImage@1
      displayName: Push image Dev
      inputs:
        awsCredentials: 'aws-cli-jtuberquia'
        regionName: 'us-east-1'
        imageSource: 'imageid'
        sourceImageId: '$(devEcrName):$(tag)'
        repositoryName: '$(devEcrName)'
        pushTag: '$(tag)'

#- stage: Deploy Dev
#  displayName: Deploy Dev
#  jobs:
#  - job: Test
#    displayName: Test
#    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature'))
#    pool:
#      vmImage: ubuntu-latest
#    steps:
    
- stage: Staging
  displayName: Deploy Staging
  jobs:
  - job: Staging
    displayName: Pull Image From Dev
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release'))
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PowerShell@2
      displayName: 'Extract version from pom.xml'
      inputs:
        targetType: 'inline'
        script: |
          $pomVersion = [xml] (Get-Content pom.xml)
          $version = $pomVersion.project.version
          Write-Host "##vso[task.setvariable variable=tag]$version"
    - task: ECRPullImage@1
      displayName: Pull image from dev
      inputs:
        awsCredentials: 'aws-cli-jtuberquia'
        regionName: 'us-east-1'
        repository: '$(devEcrName)'
        imageSource: 'imagetag'
        imageTag: '$(tag)'
        outputVariable: 'devEcrNameOutput'
    - task: ECRPushImage@1
      displayName: Push image Staging
      inputs:
        awsCredentials: 'aws-cli-jtuberquia'
        regionName: 'us-east-1'
        imageSource: 'imageid'
        sourceImageId: '$(devEcrNameOutput)'
        repositoryName: '$(stgEcrName)'
        pushTag: '$(tag)'

- stage: Prod
  displayName: Deploy Prod
  jobs:
  - job: Prod
    displayName: Pull Image From Stg
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PowerShell@2
      displayName: 'Extract version from pom.xml'
      inputs:
        targetType: 'inline'
        script: |
          $pomVersion = [xml] (Get-Content pom.xml)
          $version = $pomVersion.project.version
          Write-Host "##vso[task.setvariable variable=tag]$version"
    - task: ECRPullImage@1
      displayName: Pull image from Staging
      inputs:
        awsCredentials: 'aws-cli-jtuberquia'
        regionName: 'us-east-1'
        repository: '$(stgEcrName)'
        imageSource: 'imagetag'
        imageTag: '$(tag)'
        outputVariable: 'stgEcrNameOutput'
    - task: ECRPushImage@1
      displayName: Push image Prod
      inputs:
        awsCredentials: 'aws-cli-jtuberquia'
        regionName: 'us-east-1'
        imageSource: 'imageid'
        sourceImageId: '$(stgEcrNameOutput)'
        repositoryName: '$(prodEcrName)'
        pushTag: '$(tag)'